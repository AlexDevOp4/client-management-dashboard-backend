generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  role          String         @default("client") 
  passwordResetRequired Boolean @default(true)
  createdAt     DateTime       @default(now())

  clientProfile ClientProfile? @relation(name: "ClientUser")
  clients       ClientProfile[] @relation(name: "TrainerUser")

  trainerWorkouts Workout[] @relation(name: "TrainerWorkouts")
  clientWorkouts Workout[] @relation(name: "ClientWorkouts")

  workoutLogs WorkoutLog[] @relation(name: "UserWorkoutLogs") // ✅ Now explicitly named
  clientWorkoutPrograms WorkoutProgram[] @relation(name: "ClientWorkoutProgram")
  trainerWorkoutPrograms WorkoutProgram[] @relation(name: "TrainerWorkoutProgram")
}

model ClientProfile {
  id           String   @id @default(uuid())
  user         User     @relation(name: "ClientUser", fields: [userId], references: [id])
  userId       String   @unique

  trainer      User?    @relation(name: "TrainerUser", fields: [trainerId], references: [id]) 
  trainerId    String?

  name         String
  age          Int?
  weight       Float?
  bodyFat      Float?
  createdAt    DateTime @default(now())
  lastWorkoutDate DateTime?

  progressPics ProgressPic[] 
}

model ProgressPic {
  id          String   @id @default(uuid())
  client      ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  imageUrl    String
  createdAt   DateTime @default(now())
}

model Workout {
  id            String     @id @default(uuid())
  trainer       User       @relation(name: "TrainerWorkouts", fields: [trainerId], references: [id])
  trainerId     String
  client        User       @relation(name: "ClientWorkouts", fields: [clientId], references: [id])
  clientId      String
  title         String
  scheduledDate DateTime
  status        String     @default("pending") 
  createdAt     DateTime   @default(now())

  workoutExercises WorkoutExercise[] @relation(name: "WorkoutExercises")
  logs          WorkoutLog[]
  workoutDays   WorkoutDay[] @relation(name: "WorkoutDays")
}

model Exercise {
  id         String   @id @default(uuid())
  name       String   @unique
  category   String   // Strength, Cardio, Mobility, etc.
  createdAt  DateTime @default(now())

  workoutExercises WorkoutExercise[] @relation(name: "ExerciseWorkouts")
  logs             WorkoutLog[]
}

model WorkoutExercise {
  id          String   @id @default(uuid())
  workout     Workout  @relation(name: "WorkoutExercises", fields: [workoutId], references: [id])
  workoutId   String
  exercise    Exercise @relation(name: "ExerciseWorkouts", fields: [exerciseId], references: [id])
  exerciseId  String
  sets        Int
  reps        Json  @default("[]") // ✅ Stores an array of numbers (e.g., [12, 10, 8])
  weight      Json  @default("[]") // Array of weight values per set
  actualReps  Json  @default("[]") // Array of actual reps per set
  weekNumber  Int  // Track which week this belongs to
  originalWeek Int  @default(1)  // This tracks if it was copied from a previous week
}

model WorkoutLog {
  id             String   @id @default(uuid())
  workout        Workout  @relation(fields: [workoutId], references: [id])
  workoutId      String
  exercise       Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId     String
  client         User     @relation(name: "UserWorkoutLogs", fields: [clientId], references: [id])
  clientId       String

  setsCompleted  Int?
  repsCompleted  Json  @default("[]")
  weightUsed     Json  @default("[]")   // Strength-based exercises track weight
  timeInSeconds  Int?     // Cardio-based exercises track time
  distanceInMeters Float? // Cardio-based exercises track distance

  notes          String?  
  completed      Boolean  @default(false)
  logDate        DateTime @default(now())
}

model WorkoutProgram {
  id            String     @id @default(uuid())
  trainer       User       @relation(name: "TrainerWorkoutProgram", fields: [trainerId], references: [id])
  trainerId     String
  client        User       @relation(name: "ClientWorkoutProgram", fields: [clientId], references: [id])
  clientId      String
  title         String
  durationWeeks Int
  createdAt     DateTime   @default(now())
  status        String     @default("active") // "active" | "completed" | "archived"
  repeateWeek   Int        @default(1) // Allows repeating weeks (1 = no repeats)
  completedWorkoutsCount  Int @default(0) // Tracks number of completed workouts
  totalWorkouts Int @default(0) // Total workouts in the program
  completedDate DateTime? // When the program was completed

  weeks         WorkoutWeek[]
}

model WorkoutWeek {
  id              String     @id @default(uuid())
  program         WorkoutProgram @relation(fields: [programId], references: [id])
  programId       String
  weekNumber      Int
  repeatFromWeek  Int? 
  days            WorkoutDay[]
}

model WorkoutDay {
  id              String     @id @default(uuid())
  week            WorkoutWeek @relation(fields: [weekId], references: [id])
  weekId          String
  dayNumber       Int       // 1 = Monday, 2 = Tuesday, etc.
  workout         Workout   @relation(name: "WorkoutDays", fields: [workoutId], references: [id])
  workoutId       String
}






